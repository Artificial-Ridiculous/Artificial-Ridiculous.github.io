---
layout: post
title:  "10. 正则表达式匹配"
date:   2019-07-10 11:50:00 +0800
category: leetcode-cn
---
给你一个字符串 `s` 和一个字符规律 `p`，请你来实现一个支持 `'.'` 和 `'*'` 的正则表达式匹配。

`'.'` 匹配任意单个字符  
`'*'` 匹配零个或多个前面的那一个元素  
所谓匹配，是要涵盖 **整个字符串`s`** ，而不是部分字符串。

示例：  

### 输入1：

```python
s = "aa"
p = "a"
```

### 输出1：

```python
False
```

解释：`"a"` 无法匹配 `"aa"` 整个字符串。

---

### 输入2：

```python
s = "aa"
p = "a*"
```

### 输出2：

```python
True
```

解释：因为 `'*'` 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 `'a'`。因此，字符串 `"aa"` 可被视为 `'a'` 重复了一次。

---

### 输入3：

```python
s = "ab"
p = ".*"
```

### 输出3：

```python
True
```

解释：`".*"` 表示可匹配零个或多个（`'*'`）任意字符（`'.'`）。

---

### 输入4：

```python
s = "aab"
p = "c*a*b"
```

### 输出4：

```python
True
```

解释：因为 `'*'` 表示零个或多个，这里 `'c'` 为 0 个, `'a'` 被重复一次。因此可以匹配字符串 `"aab"`。

---

### 输入5：

```python
s = "mississippi"
p = "mis*is*p*."
```

### 输出5：

```python
False
```

---

### 暴力递归

```python
def isMatch(self,text, pattern) -> bool:
    if not pattern: return not text
    first_match = bool(text) and pattern[0] in [text[0], '.']
    if len(pattern) >= 2 and pattern[1] == '*':
        # 发现 '*' 通配符
        if len(pattern) >= 2 and pattern[1] == '*':
            return self.isMatch(text, pattern[2:]) or first_match and self.isMatch(text[1:], pattern)
    else:
        return first_match and self.isMatch(text[1:], pattern[1:])
```

### 动态规划

```python

```
